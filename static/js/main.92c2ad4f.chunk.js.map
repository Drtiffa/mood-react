{"version":3,"sources":["components/Header.js","components/CreateAvatar.js","components/ButtonDownload.js","components/ResultAvatar.js","components/Home.js","components/ResultMessage.js","components/SignIn.js","components/SignUp.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Header","logout","localStorage","removeItem","_this","forceUpdate","displayLogin","getItem","react_default","a","createElement","react_router_dom","to","className","onClick","this","Component","CreateAvatar","props","state","categories","map","category","index","selectedIndex","selectedMenuIndex","key","display","concat","params","x","i","element","type","id","value","checked","avatar_elements","some","readOnly","htmlFor","src","image","alt","selectAvatar","ButtonDownload","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","visible","img","imgUId","_this2","actualImage","document","getElementById","toDataURL","setState","body","JSON","stringify","fetch","method","headers","Accept","Content-Type","then","res","json","data","console","log","catch","err","warn","_this3","openModal","lib_default","width","height","effect","onClickAway","closeModal","href","target","rel","download","ResultAvatar","Fragment","y","param","find","Home","elementNumber","new_avatar_elements","toConsumableArray","element_category","findIndex","length","canvas","ctx","getContext","Image","clearRect","fillStyle","fillRect","forEach","drawImage","components_CreateAvatar","components_ResultAvatar","componentDidUpdate","components_ButtonDownload","ResultMessage","setTimeout","clearResult","message","SignIn","email","password","resultType","resultMessage","redirect","checkLocalStorage","handleChange","e","defineProperty","postSignIn","setItem","token","window","location","components_ResultMessage","name","required","placeholder","onChange","SignUp","confirmedPassword","postSignUp","Login","components_SignIn","components_SignUp","App","basename","components_Header","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.92c2ad4f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Header extends Component {\n\n    // disconnect me and send me back to the Login page\n    logout = () => {\n\t    localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"email\");\n        this.forceUpdate();\n    }\n\n    // if I am not login the button LOGIN is visible, the opposite will be the button LOGOUT\n    displayLogin = () => {\n        if (localStorage.getItem(\"token\")) {\n            return (\n                <Link to='/login'><button className=\"mood_logout-button\" onClick={this.logout}>Logout</button></Link>\n            )\n        } else {\n            return (\n                <Link to='/login'><button className=\"mood_login-button\">Login</button></Link>\n            )\n        }\n    }\n\n  render() {\n    return (\n        <div className=\"mood_nav\">\n            <div className=\"mood_logo\">\n                {/* at the click I am sent back to my Home at the root of my project */}\n                <Link to='/'><span>Mood</span></Link>\n            </div>\n            <div className=\"mood_text-intro\">\n                <h1>Create your avatar</h1>\n            </div>\n            <div className=\"mood_login\">\n                { this.displayLogin() }\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass CreateAvatar extends Component {\n  render() {\n    return (\n      <div className=\"mood_create-avatar\">\n        <div className=\"mood_create-avatar-nav\">\n          <ul className=\"mood_create-nav-list\">\n            {/* loop in my categories table to create each li by category */}\n            {this.props.state.categories.map((category, index) => {\n              // add the active class to the selected li\n              var selectedIndex = this.props.state.selectedMenuIndex === index ? 'active' : '';\n              return <li key={index} onClick={() => this.props.display(category, index)} className={`mood_create-nav-option ${selectedIndex}`}>{category}</li>\n            })}\n          </ul>\n        </div>\n        {/* loop in my categories table */}\n        {this.props.state.categories.map(category => \n          this.props.state.display === category &&  \n          <div key={category} className={`mood_create-avatar-wrapper ${category}`}>\n            {/* for each category find the elements in my table params that this category */}\n            {this.props.state.params.map((x, i)  => { \n              if(x.category === category) {\n                return (\n                  // then return all my images that have the same category\n                  <div key={i} className={`choice_element ${x.element}`}>\n                    <input type=\"radio\" id={x.element} value={x.element} checked={this.props.state.avatar_elements.some(x => x === i+1)} readOnly />\n                    {/* callback function to prevent the selectAvatar function launches itself to load the component */}\n                    <label htmlFor={x.element}><img src={`${x.image}`} alt={x.element} onClick={() => this.props.selectAvatar(i+1)}/></label>\n                  </div>\n              )}\n              else {\n                return null;\n              }\n            })}\n          </div>\n        )}\n      </div>    \n    );\n  }  \n}\n\nexport default CreateAvatar;","import React, { Component } from 'react';\n// import a library popup\nimport Modal from 'react-awesome-modal';\n\nclass ButtonDownload extends Component {\n    constructor(props) {\n        super(props);\n        // popin initially closed\n        this.state = {\n            visible : false,\n            img: null,\n            imgUId: null\n        }\n    }\n\n    // open popup on click\n    openModal() {\n        const actualImage = document.getElementById(\"canvas\").toDataURL(\"image/png\");\n        this.setState({\n            visible : true,\n            // create image\n            img : actualImage\n        });\n        var body = JSON.stringify({ actualImage })\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n        fetch('https://mood-avatar.herokuapp.com/avatar', {\n            method: 'POST',\n            headers,\n            body\n        })\n        .then(res => res.json())\n        .then(data => {\n            console.log(data);\n            this.setState({\n                imgUId : data.imgUId\n            });\n        })\n        .catch(err => console.warn(err))\n    }\n\n    // close popup on click\n    closeModal() {\n        this.setState({\n            visible : false,\n        });   \n    }\n\n    render() {\n        return (\n            <section className=\"section_button-download\">\n                {/* button for open popup */}\n                <div className=\"mood_button-download\">\n                    <button className=\"button_download\" onClick={() => this.openModal()}>Download my avatar</button>\n                </div>\n                {/* characteristic of my popup (basic state, size, opening effect, popup closing at click outside the popup) */}\n                <Modal \n                    visible={this.state.visible}\n                    width=\"500\"\n                    height=\"200\"\n                    effect=\"fadeInUp\"\n                    onClickAway={() => this.closeModal()}\n                >\n                    {/* popup */}\n                    <div className=\"modal_content\">\n                        <span className=\"modal_close\" onClick={() => this.closeModal()}>X</span>\n                        <h1>Download my avatar</h1>\n                        <div className=\"avatar_download\">\n                            <p>My URL avatar : <a className=\"url\" href={`https://mood-avatar.herokuapp.com/avatar/${this.state.imgUId}/image`} target=\"_blank\" rel=\"noopener noreferrer\">https://mood-avatar.herokuapp.com/avatar/{this.state.imgUId}/image</a></p>\n                            <p>Export my avatar <a href={this.state.img} download=\"my_avatar.png\"><span className=\"png\">PNG</span></a>.</p>\n                        </div>\n                    </div>\n                </Modal>\n            </section>\n        );\n    }\n};\n\nexport default ButtonDownload","import React, { Component } from 'react';\n\nclass ResultAvatar extends Component {\n  render() {\n    return(\n      <>\n        <div className=\"mood_result-avatar\">\n          {/* compare the avatar_elements and params tables to find the same element in my two tables */}\n          {this.props.state.avatar_elements.map(y => {\n            var param = this.props.state.params.find(x => x.element === 'element_'+ y)\n            // if find the same element in my two arrays then I inject the param into src and alt\n            return <img key={y} id=\"image_svg\" className=\"mood_result-image\" src={param && param.image} alt={param && param.element}/>\n          })}\n        </div>\n        <canvas id=\"canvas\" width=\"500\" height=\"500\"></canvas>\n      </>\n    );\n  }\n}\n\nexport default ResultAvatar;","import React, { Component } from 'react';\nimport CreateAvatar from './CreateAvatar';\nimport ButtonDownload from './ButtonDownload';\nimport ResultAvatar from './ResultAvatar';\n\nclass Home extends Component {\n    state = {\n        params : [],\n        categories : ['shape', 'face', 'hair', 'accessory'],\n        display : '',\n        avatar_elements : [1, 4, 12, 19],\n        selectedMenuIndex : 0\n      }\n    \n      // make the link with my back by making an HTTP call to the root\n      componentDidMount() {\n        fetch('https://mood-avatar.herokuapp.com/')\n        .then(res => res.json())\n        .then(params => this.setState( { params } ))\n        .catch(err => console.log(err))\n\n        // when opening the app my category shape is visible\n        this.setState({ display: this.state.categories[0] })\n      }\n    \n      // show my category on click\n      display = (category, index) => {\n        this.setState({ display: category })\n        this.setState({ selectedMenuIndex: index })\n      } \n\n      // select the elements at the click to compose the avatar\n      selectAvatar = (elementNumber) => {\n        // create a copy of avatar_elements table\n        var new_avatar_elements = [...this.state.avatar_elements]\n        // get the category corresponding to elementNumber\n        var element_category = this.state.params.find(x => x.element === 'element_' + elementNumber).category\n        // get the index of my category in my categories table\n        var category_index = this.state.categories.findIndex(x => x === element_category);\n        // we replace the index of the element selected for its category\n        new_avatar_elements[category_index] = elementNumber\n        this.setState( {\n          // the avatar_elements table is replaced by its copy new_avatar_elements\n          avatar_elements : new_avatar_elements\n        })\n      }\n\n      // canvas that allows the dowload of the image of my avatar\n      componentDidUpdate() { \n        if(this.state.params.length > 0) {\n          var canvas = document.getElementById(\"canvas\");\n          var ctx = canvas.getContext(\"2d\");\n          var image = new Image();\n          \n          ctx.clearRect(0, 0, canvas.width, canvas.height);\n          \n          ctx.fillStyle = \"#ffffff\";\n          ctx.fillRect(0,0, canvas.width, canvas.height);\n    \n          const base = this.state.avatar_elements.map(y => {\n            var param = this.state.params.find(x => x.element === 'element_'+ y)\n            return param && param.image\n          });\n          \n          base.forEach(function(element) {\n            image.src = element;\n            ctx.drawImage(image,0,0,500,500);\n          });\n        }\n      }\n\n    render() {\n      return (\n        <div className=\"mood_home\">\n            <CreateAvatar state={this.state} \n            display={this.display} \n            selectAvatar={this.selectAvatar} />\n            <ResultAvatar state={this.state} \n            componentDidUpdate={this.componentDidUpdate} />\n            <ButtonDownload componentDidUpdate={this.componentDidUpdate} />  \n        </div>\n      )\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\n\t\nclass ResultMessage extends Component {\n\n    // Timeout after 5s the message disappears\n    componentDidMount() {\n        setTimeout(() => {\n            this.props.clearResult();\n        }, 5000)\n    }\n\n    render() {\n    return(\n        // className take type err (failure or success) then inject the corresponding message\n        <div className={`result ${this.props.type}`}>\n            {this.props.message}\n        </div>\n    );\n    }\n}\n\nexport default ResultMessage;","import React, { Component } from 'react';\nimport ResultMessage from './ResultMessage';\n\t\nclass SignIn extends Component {\n    state = {\n        email: '',\n        password: '',\n        resultType: '',\n        resultMessage: '',\n        redirect: false\n    }\n\n    // allows the refresh of the app to reconnect with Local Storage\n    checkLocalStorage = () => {\n    var email = localStorage.getItem(\"email\");\n        if (email) {\n            this.setState({ email });\n        }\n    }\n\n    // collect the info entered in the input\n    handleChange = (e) => {\n        this.setState({ [e.target.id]: e.target.value });\n    }\n\n    // send the information filled in my input to my database\n    postSignIn = (email, password) => {\n        var body = JSON.stringify({ email, password })\n        const headers = {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n        fetch('https://mood-avatar.herokuapp.com/users/auth', {\n            method: 'POST',\n            headers,\n            body\n        })\n        .then(res => res.json())\n        .then(data => {\n        this.setState({ resultType: data.resultType, resultMessage: data.resultMessage });\n\n        if (data.resultType === 'success') {\n            localStorage.setItem(\"token\",data.token)\n            localStorage.setItem(\"email\",email)\n            // after verification, if login returned to the Home after one second\n            setTimeout(() => {\n                window.location.href = '/';\n            }, 1000)\n        }\n    })\n        .catch(err => console.warn(err))\n    }\n\n    // function triggered by the timeOut, which makes the component ResultMessage hidden\n    clearResult = () => {\n        this.setState({ resultType: '', resultMessage: '' });\n    }  \n\n    render() {\n        return (\n            <>\n                <div className=\"result_message\">{this.state.resultMessage && <ResultMessage type={this.state.resultType} message={this.state.resultMessage} clearResult={this.clearResult} />}</div>\n                <div className=\"login_sign-in\">\n                    <div className=\"sign-in_content\">\n                        <div className=\"sign-in_title\">\n                            <h2>Sign in</h2>\n                        </div>\n                        <form className=\"sign-in_form\">\n                            <div className=\"sign-in_form-element sign-in_form-email\">\n                                <label>Email</label>\n                                <input type=\"text\" id=\"email\" name=\"email\" required placeholder=\"Enter email\" value={this.state.email} onChange={this.handleChange}></input>\n                            </div>\n                            <div className=\"sign-in_form-element sign-in_form-password\">\n                                <label>Password</label>\n                                <input type=\"password\" id=\"password\" name=\"password\" required placeholder=\"Enter password\" value={this.state.password} onChange={this.handleChange}></input>\n                            </div>\n                        </form>\n                        <div className=\"sign-in_button\">\n                            <button className=\"sign-in_submit\" value=\"Signin\" onClick={() => this.postSignIn(this.state.email, this.state.password)}>Sign in</button>\n                        </div>\n                    </div>\n                </div>\n            </>\n        )\n    }    \n}\n\nexport default SignIn","import React, { Component } from 'react';\nimport ResultMessage from './ResultMessage';\n\nclass SignUp extends Component {\n  state = {\n    email: '',\n    password: '',\n    confirmedPassword: '',\n    resultType: '',\n    resultMessage: ''\n  }\n\n  // collect the info entered in the input\n  handleChange = (e) => {\n    this.setState({ [e.target.id]: e.target.value });\n  }\n\n  // send the information filled in my input to my database\n  postSignUp = (email, password, confirmedPassword) => {\n    var body = JSON.stringify({ email, password, confirmedPassword })\n    const headers = {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n        }\n    fetch('https://mood-avatar.herokuapp.com/users', {\n      method: 'POST',\n      headers,\n      body\n    })\n    .then(res => res.json())\n    .then(data => {\n      console.log(data);\n      this.setState({ resultType: data.resultType, resultMessage: data.resultMessage}, () => {\n        if (data.resultType === 'success') {\n          this.setState({ email: '', password: '', confirmedPassword: '' });\n        } \n      });\n    })\n    .catch(err => console.warn(err))\n  }\n\n  // function triggered by the timeOut, which makes the component ResultMessage no longer appears\n  clearResult = () => {\n    this.setState({ resultType: '', resultMessage: '' });\n  }  \n\n  render() {\n    return (\n      <>\n        <div className=\"result_message\">{this.state.resultMessage && <ResultMessage type={this.state.resultType} message={this.state.resultMessage} clearResult={this.clearResult} />}\n        </div>\n        <div className=\"login_sign-up\">\n            <div className=\"sign-up_content\">\n                <div className=\"sign-up_title\">\n                    <h2>Sign up</h2>\n                </div>\n                <form className=\"sign-up_form\">\n                    <div className=\"sign-up_form-element sign-up_form-email\">\n                        <label>Email</label>\n                        <input type=\"text\" id=\"email\" name=\"email\" required placeholder=\"Enter email\" value={this.state.email} onChange={this.handleChange}></input>\n                    </div>\n                    <div className=\"sign-up_form-element sign-up_form-password\">\n                        <label>Password</label>\n                        <input type=\"password\" id=\"password\" name=\"password\" required placeholder=\"Enter password\" value={this.state.password} onChange={this.handleChange}></input>\n                    </div>\n                    <div className=\"sign-up_form-element sign-up_form-password\">\n                        <label>Confirmed password</label>\n                        <input type=\"password\" id=\"confirmedPassword\" name=\"confirmedPassword\" required placeholder=\"Confirmed password\" value={this.state.confirmedPassword} onChange={this.handleChange}></input>\n                    </div>\n                </form>\n                <div className=\"sign-up_button\">\n                    <button className=\"sign-up_submit\" value=\"Signup\" onClick={() => this.postSignUp(this.state.email, this.state.password, this.state.confirmedPassword)}>Sign up</button>\n                </div>\n            </div>\n        </div>\n      </>\n    )\n  }\n}  \n\nexport default SignUp","import React, { Component } from 'react';\nimport SignIn from './SignIn'\nimport SignUp from './SignUp'\n\nclass Login extends Component {\n  render() {\n    return (\n        <div className=\"login_content\">\n            <SignIn />\n            <SignUp />\n        </div>\n    )\n  }\n}\n\nexport default Login","import React, { Component } from 'react';\nimport './App.scss';\nimport Header from './components/Header';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Login from './components/Login';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"background\"></div>\n        <div className=\"mood_main\">\n            <div className=\"mood_col-main\">\n                <div className=\"mood_container\">\n                  <Router basename='/'>\n                    <Header />\n                    {/* say that this road refers to such a component */}\n                    <Switch>\n                        <Route exact path='/' component={Home} />\n                        <Route path='/login' component={Login} />\n                    </Switch>\n                  </Router>\n                </div>    \n            </div> \n        </div>  \n      </div>     \n    ); \n  }  \n}  \n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}